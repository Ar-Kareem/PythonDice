for development: 
    clone repo and ensure conda is installed in your system
    # you can multiple env's for different platforms i.e. ./env-linux and ./env-win etc.
    `conda env create --prefix ./env -f environment.yml`
    `conda activate ./env`
    `pip install -e . --config-settings editable_mode=strict`
to run tests:
    `conda activate ./env`
    `pip install -r requirements-test.txt`
    `pip install -e . --config-settings editable_mode=strict`
    `python -m pytest`
    to generate test coverage:
        `pytest --cov --cov-report=html:coverage_re`
    to add new tests:
        add anydice code in `.\test\autoouts\fetch_in.py`
        `python .\test\autoouts\fetch.py`
to build package:
    `conda activate ./env`
    `rm dist/*`
    `python -m build --sdist`
    `python -m twine upload --repository pypi dist/*`
    rm dist/* && python -m build --sdist && python -m twine upload --repository pypi dist/*




TODO
    IMPORTANT:
        create blank RV. [A sequence range must begin with a number, while you provided "d{}".]
    use  functools.wraps or functools.update_wrapper.
    tiny edge case: when anydice performs a comparison, it always has vals as (0, 1) even if one of them has prob=0
    will crash if code is "function: vars {result: 1} output [vars]"
    
    auto __version__ https://packaging.python.org/en/latest/discussions/single-source-version/#single-source-version
    improve error output
    add to doc that executes code that fails in anydice
    implement `plucker`
    make resolver wrap () for all operators then make sure all tests pass
    make function depth a compiler flag?
    Build Lex Yacc test cases
    yacc line number for errors wrong
RV:
    FIX __repr__ for RV (in named section) should be string not entire graph
    implement {1,2}@RV (sum multiple k-th order statistics)
    figure out time limiter / implement expansion limit warning in caster

add more documentation






